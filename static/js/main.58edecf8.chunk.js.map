{"version":3,"sources":["logo.svg","BootstrapNavbar.js","GridGenerator.js","InputComponent.js","App.js","reportWebVitals.js","index.js"],"names":["BootstrapNavbar","Navbar","bg","variant","Brand","href","Nav","className","GridGenerator","props","state","series","paralell","cellList","showGrid","errors","findPartition","bind","nums","k","p","total_values","sort","reverse","i","sums","output","push","forEach","num","target","indexOf","Math","min","apply","array","length","array1","this","split","map","item","isNaN","parseInt","packLayout","parallel","seriesArray","yindex","reduce","a","b","ListGroup","horizontal","value","index","Item","action","React","Component","InputComponent","onSeriesChange","onParallelChange","onCellListChange","onGenerate","onToggleGrid","onExampleData","onResetData","setState","console","log","event","formIsValid","match","strInput","finalPack","InputGroup","Prepend","Text","id","FormControl","aria-label","aria-describedby","onChange","style","color","as","class","Button","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58edecf8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n//import FormControl from \"react-bootstrap/FormControl\"\n\nexport default function BootstrapNavbar() {\n  return (\n    <>\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Battery Pack Generator</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n      </Nav>\n    </Navbar>\n    </>\n  );\n}\n","import React from \"react\";\nimport { ListGroup } from 'react-bootstrap'\n\nexport default class GridGenerator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            series: 0,\n            paralell: 0,\n            cellList: [],\n            showGrid: false,\n            errors: {},\n        };\n        \n        this.findPartition = this.findPartition.bind(this);\n    }\n\n    findPartition(nums, k, p) {\n        var total_values = 0\n        nums.sort()\n        nums.reverse()\n        const sums = [];\n        var output = []\n        var i;\n        for(i = 0; i<k; i++){\n            sums[i] = 0\n            //console.log(sums)\n            output.push([])\n        }\n        //console.log(output)\n        nums.forEach(function(num){\n            var target = sums.indexOf(Math.min.apply(Math, sums))\n            //console.log(target, num)\n            //console.log(sums)\n            \n            if (total_values !== k*p){\n                sums[target] += num\n                output[target].push(num)\n                total_values++ \n            }\n        \n        })\n        output.forEach(function(array){\n            if(array.length < p){\n                for(i = array.length; i < p; i++){\n                    array[i] = 0\n                }\n            }\n        })\n        return output;\n    }\n\n   \n\n   render(){\n    const array1 = this.props.cellList.split(\",\").map(function(item) {\n        if (isNaN(parseInt(item, 10))){\n            return 0;\n        }\n        return parseInt(item, 10);\n    });\n    const packLayout = this.findPartition(array1,this.props.series,this.props.parallel)\n    this.state.cellList = packLayout;\n    \n    return (\n        <div>\n            {this.state.cellList.map((seriesArray, yindex) => {\n                return(\n                <>\n                <h2>Cell {yindex+1} </h2>\n                <p>Total Capacity: {seriesArray.reduce((a, b) => a + b, 0)}</p>\n                <ListGroup horizontal>\n                {seriesArray.map((value, index) => {\n                    if (value > 0){\n                        return (\n                        <ListGroup.Item action >{value}</ListGroup.Item>\n                        )\n                    } else {\n                        return (<ListGroup.Item action variant=\"danger\">{value}</ListGroup.Item>)}\n                \n                })}\n               </ListGroup>\n               </>\n                )\n            })}\n            \n        </div>\n    )\n}\n}\n","import React from 'react'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport GridGenerator from './GridGenerator'\n/*tslint:disabled*/\nexport default class InputComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            series: 0,\n            parallel: 0,\n            cellList: \"\",\n            showGrid: false,\n            errors: {},\n        };\n        this.onSeriesChange = this.onSeriesChange.bind(this);\n        this.onParallelChange = this.onParallelChange.bind(this);\n        this.onCellListChange = this.onCellListChange.bind(this);\n        this.onGenerate = this.onGenerate.bind(this);\n        this.onToggleGrid = this.onToggleGrid.bind(this);\n        this.onExampleData = this.onExampleData.bind(this);\n        this.onResetData = this.onResetData.bind(this);\n       \n    }\n    onResetData(){\n        this.setState({\n            series: \"\",\n            parallel: \"\",\n            cellList: \"\",\n            showGrid: false,})\n    }\n    onGenerate(){\n        this.setState({showGrid: true})\n        this.setState({\n            series: this.state.series,\n            parallel: this.state.parallel,\n            cellList: this.state.cellList,\n            showGrid: true,})\n        console.log(this.state.showGrid)\n    }\n    onExampleData(){\n        this.setState({showGrid: true})\n        this.setState({\n            series: 4,\n            parallel: 2,\n            cellList: \"3093,3018,3318,3242,3102,3098,3364,3423\",})\n    }\n    onToggleGrid(){\n        if (this.state.showGrid === false){\n            this.setState({showGrid: true})\n        } else if (this.state.showGrid === true){\n            this.setState({showGrid: false})\n        }\n\n    }\n    onSeriesChange(event) {\n        let strInput = event.target.value;\n        let errors = {};\n        let formIsValid = true;\n        \n        if(!strInput.match(/^[0-9]*$/) & isNaN(event.target.value)){\n            formIsValid = false;\n            errors[\"Series\"] = \"Invalid Input\";\n         }\n         this.setState({errors: errors})\n         if(formIsValid){\n            this.setState({ series: event.target.value });\n         }\n        console.log(this.state.series)\n        }\n    onParallelChange(event) {\n        let strInput = event.target.value;\n        let errors = {};\n        let formIsValid = true;\n        \n        if(!strInput.match(/^[0-9]*$/) & isNaN(event.target.value)){\n            formIsValid = false;\n            errors[\"Parallel\"] = \"Invalid Input\";\n         }\n         console.log(errors[\"Parallel\"] )\n         this.setState({errors: errors})\n         if(formIsValid){\n             \n            this.setState({ parallel: event.target.value });\n         }\n        }\n    onCellListChange(event) {\n        let strInput = event.target.value;\n        let errors = {};\n        let formIsValid = true;\n\n        if(!strInput.match(/^\\d+(,\\d+)*$/) & !strInput.match(/^\\d+(,\\d+)*[,]$/) & isNaN(event.target.value)){\n            formIsValid = false;\n            errors[\"Cell List\"] = \"Please enter a comma separated list of cell capacities without spaces.(Example: 111,222,333,444)\";\n         }\n        this.setState({errors: errors})\n        if (formIsValid){\n            console.log(event.target.value)\n            this.setState({ cellList: event.target.value });\n            }\n        }\n    render(){\n    let finalPack;\n    \n    if(this.state.showGrid === true){\n        finalPack = <GridGenerator series={this.state.series} parallel={this.state.parallel} cellList={this.state.cellList} />\n    }\n    return (\n        <>\n        <div className=\"input\">\n            \n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon2\">\n                  Series Count:\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={this.onSeriesChange}\n                value={this.state.series}\n              />\n              </InputGroup>\n              <div style={{color: \"red\"}}>{this.state.errors[\"Series\"]}</div>\n              <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text\n                  id=\"basic-addon2\"\n                  \n                >\n                  Paralell Count:\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                aria-label=\"Recipient's username\"\n                aria-describedby=\"basic-addon2\"\n                onChange={this.onParallelChange}\n                value={this.state.parallel}\n              />\n            </InputGroup>\n            <div style={{color: \"red\"}}>{this.state.errors[\"Parallel\"]}</div>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon2\">\n                  Cell Capacities\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl \n                as=\"textarea\" \n                aria-label=\"With textarea\"\n                onChange={this.onCellListChange}\n                value={this.state.cellList} />\n            </InputGroup>\n            <div style={{color: \"red\"}}>{this.state.errors[\"Cell List\"]}</div>\n            \n            <div class=\"col-md-12 text-center\">\n                <Button variant=\"dark\" onClick={this.onGenerate}  >Generate Pack</Button>{\" \"}\n                <Button variant=\"dark\" onClick={this.onExampleData} >Example Data</Button>{\" \"}\n                <Button variant=\"dark\" onClick={this.onResetData} >Reset</Button>{\" \"}\n            </div>\n       \n        \n        </div>\n        <div className=\"finalPack\"> {finalPack}</div>\n        </>\n    )\n}}\n\n","import logo from './logo.svg';\nimport './App.css';\nimport BootstrapNavbar from './BootstrapNavbar'\nimport InputComponent from './InputComponent'\n\nfunction App() {\n  return (\n    <>\n    <BootstrapNavbar/>\n    <InputComponent/>\n    </>\n\n\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}